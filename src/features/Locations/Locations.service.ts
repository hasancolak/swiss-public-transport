import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
import type { LocationQueryParams, LocationQueryResponse } from "./Locations.types"

/**
 * @function buildQueryString
 * @param query
 * @returns query string
 */
const buildQueryString = ({ query }: LocationQueryParams): string =>
  `?query=${encodeURIComponent(query)}`

/**
 * @function locationsService
 * @param query
 * @returns Json data from service
 */
export const locationsService = createApi({
  baseQuery: fetchBaseQuery({
    // For single usage of api url, I inserted here as string
    // It is better approach reading this from an .env file or constants resource.
    baseUrl: "http://localhost:3000/locations/api",
  }),
  reducerPath: "locationsApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["query"],
  endpoints: (build) => ({
    // Supply generics for the return type (in this case `QueryResponse`)
    // and the expected query argument. If there is no argument, use `void` for the argument type instead.
    getLocations: build.query<LocationQueryResponse, LocationQueryParams>({
      query: (props) => buildQueryString(props),
      // `providesTags` determines which 'tag' is attached to the cached data returned by the query.
      providesTags: (result, error, query) => [{ type: "query", query }],
    }),
  }),
})

// Hooks are auto-generated by RTK-Query
export const { useGetLocationsQuery } = locationsService
